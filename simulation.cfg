#
# Simulation parameters
#

# Experiment Configurations

experimento = "ql";
simulacion = "rosrun stage_ros stageros -g /home/nahuel/catkin_ws/src/steering_behaviors_controller/world/set.world > /dev/null &";
experimentos :{
	reactive :{
		nbExp = 0;
	},
	ql:{
		nbExp = 1;
		fresh = 0; #0 para empezar con tabla ql nueva, 1 para empezar desde el archivo (continuar aprendizaje)
		epocSize=500;
		validSize=20;
		intraEpoc=4;
	},
	ann:{
		nbExp = 2;
	}
}
# Agent Configurations

agents :{
 		blendConstante:	{ 	behaviors 	= ["seek", "obstacleAvoidance"];
							weights 	= [0.500, 0.500];	},

		agenteOnlySeek:	{ 	behaviors 	= ["seek"];
							weights 	= [1.000];	},

		agenteOnlyAvoidObstacles:	{ 	behaviors 	= ["obstacleAvoidance"];
							weights 	= [1.000];	},

		#Requiere los parametros para discretizar los pesos en la Qtable
		qlInit:	{ 			behaviors 	= ["seek", "obstacleAvoidance"];
							wPosibles = 5; #[0.1 0.3 0.5 0.7 0.9] #wDiscretizacion = 0.200;
							qValInit = 0.000;
							file = "./src/steering_behaviors_controller/qTable.txt";
							timeOut = 120;},

		#Requiere los parametros para cargar los pesos del QtableFile
		qlLoad:	{ 			behaviors 	= ["seek", "obstacleAvoidance"];
							wPosibles = 5;
							sSize = 4; #Valores de estado de entrada
							file = "./src/steering_behaviors_controller/qTable.txt";
							timeOut = 120; },

		qlTest:	{ 			behaviors 	= ["seek", "obstacleAvoidance"];
							wPosibles = 5;
							sSize = 4; #Valores de estado de entrada
							file = "./src/steering_behaviors_controller/qTable.txt";
							timeOut = 120; },

		#Requiere los parametros realizar el aprendizaje
		qlTrain:	{ 		behaviors 	= ["seek", "obstacleAvoidance"];
							minDeltaVisitas = 10;
							#Refuerzo:(id behavior, reinforcementState, reinforcementValue, message)
							refuerzos =	( 	(0, 0.500, 1.000, "objetivo"),
											(1, 1.000, -0.300, "peligroDeColision") );
							qValMax = 1.000;
							qValMin = -1.000;
							dTpunish = -0.01; #punishment per second
							gamma = 0.950;}
		};

############################
# Behaviors Configurations #
############################

behaviors : {

# Seek Behavior Configuration

	seek: 	{ 	name 			= "seekReactive";
				type			= "seek";
				variablesDeEstado		= 1;
				desiredV		= 1.000;

				discret = "iregular";
				vectorEstados = [0.500, 0.600, 1.000, 5.000];

				minEstado		= 0.000 ;
				maxEstado		= 20.000 ;
				paso			= 5.000;

				toleranceToTarget 	= 0.560; },

# Avoid Obstacles Behavior Configuration

	obstacleAvoidance:	{ 	name 			= "avoidObstaclesReactive";
							type			= "avoidObstacles";
							variablesDeEstado		= 3;
							desiredV = 1.000;

							discret = "iregular";
							vectorEstados = [1.000, 1.250, 1.500, 2.000, 2.500, 3.500, 5.000];

							distMax 		= 5.000;
							distMin 		= 1.150;
							haz 			= 270;
							prescicion		= 1.000;

							minEstado		= 0.000 ;
							maxEstado		= 2.000 ;
							paso			= 0.500 },

# Flee Behavior Configuration

	fleeReactive: 	{ 	name 			= "fleeReactive";
						type			= "flee";
						targetX 		= 17.000;
						targetY 		= 20.000;
						variables		= 2;
						toleranceToTarget 	= 0.200; }

		};

#Luego de añadir la configuracion del comportamiento añadir la instanciacion en el metodo Factory::pickBehavior de Factory.cpp
