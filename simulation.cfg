#
# Simulation parameters
#

# Agent Configurations

agents :{
 		blendConstante:	{ 	type 		= "agenteReactivo";
							behaviors 	= ["seek", "obstacleAvoidance"];
							weights 	= [0.700, 0.300];	},

		agenteOnlySeek:	{ 	type 		= "agenteOnlySeek";
							behaviors 	= ["seek"];
							weights 	= [1.000];	},

		agenteOnlyAvoidObstacles:	{ 	type 		= "agenteOnlyAvoidObstacles";
										behaviors 	= ["obstacleAvoidance"];
										weights 	= [1.000];	} };

############################
# Behaviors Configurations #
############################

behaviors : {

# Seek Behavior Configuration

	seek: 	{ 	name 			= "seekReactive";
				type			= "seek";
				desiredV		= 1.000;
				variablesDeEstado		= 1;
				discret = "iregular";
				minEstado		= 0.000 ;
				maxEstado		= 20.000 ;
				paso			= 5.000;
				vectorEstados = [0.000, 0.250, 1.000, 5.000, 10.000];
				toleranceToTarget 	= 0.300; }

# Avoid Obstacles Behavior Configuration

	obstacleAvoidance:	{ 	name 			= "avoidObstaclesReactive";
							type			= "avoidObstacles";
							variables		= 1;
							distMax 		= 3.000;
							distMin 		= 1.500;
							haz 			= 270;
							prescicion		= 1.000;
							variablesDeEstado		= 3;
							discret = "iregular";
							minEstado		= 0.000 ;
							maxEstado		= 2.000 ;
							paso			= 0.500;
							vectorEstados = [0.000, 0.100, 0.500, 1.000, 4.000];
							sectores		= 3;
							desiredV = 1.000 }

# Flee Behavior Configuration

	fleeReactive: 	{ 	name 			= "fleeReactive";
						type			= "flee";
						targetX 		= 17.000;
						targetY 		= 20.000;
						variables		= 2;
						toleranceToTarget 	= 0.200; }

		};

#Luego de añadir la configuracion del comportamiento añadir la instanciacion en el metodo Factory::pickBehavior de Factory.cpp

# wSelector Configuration

weights : {
			constW:			{ 	type = "constW";
								ceroRules =	( (1, 2.000) );
							},

			constWOnlySeek:	{ 	type = "constW";
								ceroRules =	( );
							},

			constWOnlyAO:	{ 	type = "constW";
								ceroRules =	( (0, 2.000) );
							},

			qvalueW:		{	type = "qvalueW";
								#wDiscretizacion = 0.200;
								wPosibles = 6;
								#[0.0 0.2 0.4 0.6 0.8 1.0]
								minDeltaVisitas = 5;
								refuerzos =	( 	(0, 0.000, 1.000, "objetivo"),
												(1, 0.100, -0.800, "colision") );
								qValInit = 0.000;
								qValMax = 1.000;
								qValMin = -1.000;
								dTpunish = -0.050;
								relativeValue = 0.800;	#Gamma
								file = "./src/steering_behaviors_controller/qTable.txt";

							},

			constQvalueW:	{ 	type = "constQvalueW";
								file = "./src/steering_behaviors_controller/qTable.txt";
								wPosibles = 6;
								wSize = 2;
								sSize = 4;
							},

			qvalueWFile:	{ 	type = "qvalueW";
								minDeltaVisitas = 5;
								file = "./src/steering_behaviors_controller/qTable.txt";
								wPosibles = 6;
								wSize = 2;
								sSize = 4;
								refuerzos =	( 	(0, 0.000, 1.000, "objetivo"),
												(1, 0.100, -0.800, "colision") );
								relativeValue = 0.800;	#Gamma
							},

			constAnnW:		{ 	type = "constAnnW";
							}
			};
